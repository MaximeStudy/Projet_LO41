opérateur : ihm
  - menu : 
    . Un mode normal
    . Un fichier teste
    . Un mode dégradé
      *defaut usinage
      *defaut convoyeur
      *defaut robot retrait

superviseur :
  -on crée une liste contenant x liste chainé (x = nb type différent)
  -fonction creePiece :
    . crée la structure d'une piece : type, id, usine (bool)
    . on détermine la machine en fonction du type   :    on regarde quelle table a le meme type que la piece
    . on met la piece dans la liste chainé d'attente du type d'opération
  
  signal sigaction(sigusr1,fctEtat)
  signal sigaction(sigusr2,fctEtat2)
  
  
  -fctEtat
            if(lock-timewait(&testDefaillance,20) == ?)
              on passe le systeme en erreur
            else unlock ( &testDefaillance)
   -fctEtat2
            if(lock-timewait(&testDefaillance2,30) == ?)
              on passe le systeme en erreur
            else unlock ( &testDefaillance2)
    . 
thread_liste:
        . On averti la machine du type type qu'une piece est la : pthread_cond_signal(&tab[i]); //a modifier
        . On se met a dormir pthread_cond_wait(&tab[i],&mutex);
        . On supprime le premier element du tableau
        
thread_machine : (crée dans le superrviseur par machine)
        . pthread_cond_wait(&dormir)
        if(lock-timewait(&mutMAchineDefaillance[i],10min))
           machine[i]=defaillant
        unlock(&mutMAchineDefaillance);
        pthread_cond_signal(&retour[i]);
        pthread_cond_signal(&robotRetrait);

        
machine : 
  while (1)
    {
      			pthread_cond_wait(&tab[i],&mutex);
            lock(comToAlim)
            Dans variable global on met le type de la machine
            (global) courant = n
            pthread_cond_signal(&robotAlim);
            Regarde dans le tab du conv si il y a une piece de son type pas usiné
            Retire la piece du tableau
             pthread_cond_signal(&dormir)
            Usine pendant n sec       
            unlock(&mutMAchineDefaillance);
      			pthread_cond_wait(&retour[i],&mutex);
             On check le tableau du convoyeur à l'emplacement 0 si la case est libre.
            Si elle est libre, on dépose la piece
            Si elle est pas libre, on attend
            
            
    }
    

Robot alimentation :
       			pthread_cond_wait(&robotAlim);
            on récupère le type dans la variable globale
            On récupère &tab[courant][0]
            on réveil le thread de la liste chainé de la variable courant : pthread_cond_signal(&tab[courant]);
            
            raise (sigusr1)
            
            On check le tableau du convoyeur à l'emplacement 0 si la case est libre.
            Si elle est libre, on dépose la piece
            Si elle est pas libre, on attend
            
            unlock (&testDefaillance)
           
            unlock(comToAlim)

thread_conv :
  Il fait tourner les pieces dans son tableau
      
      
Robot de retrait
          While(1)
       			pthread_cond_wait(&robotRetrait);
            
            raise (sigusr2)
            
            recupere la premiere piece qui arrive
            unlock (&testDefaillance2)
            
            
           
